// Code generated by xbit. DO NOT EDIT.
package entry

import (
	"context"

	"github.com/opentracing/opentracing-go"
	"google.golang.org/grpc/metadata"

	"xbitgo/apps/demo/handler"
	. "xbitgo/proto/apps/demo"

	"github.com/xbitgo/core/di"
	"github.com/xbitgo/core/log"
)

type DemoHandler struct {
	UnimplementedDemoServer
	impl DemoServer
}

func NewDemoHandler() *DemoHandler {
	impl := handler.NewDemoHandlerImpl()
	di.MustBind(impl)
	return &DemoHandler{
		impl: impl,
	}
}

func (s *DemoHandler) Test(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	span, ctx := opentracing.StartSpanFromContext(ctx, "DemoHandler_Test")
	defer span.Finish()

	meta, _ := metadata.FromIncomingContext(ctx)
	log.With().TraceID(ctx).Field("request", req).Field("metadata", meta).Debugf("[Test] on request")
	resp, err := s.impl.Test(ctx, req)
	log.With().
		Field("request", req).
		Field("response", resp).
		Field("error", err).
		Field("metadata", meta).
		Debugf("[Test] on response")
	return resp, err
}
