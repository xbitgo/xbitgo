// Code generated by xbit. DO NOT EDIT.
package rpc_client

import (
	"context"
	"time"

	//"google.golang.org/grpc/metadata"
	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/xbitgo/components/prometheus"

	"xbitgo/proto/apps/user"
)

var User = RPCService{Name: "user"}

func GetUserClient() *UserClient {
	conn, ok := RpcConn[User.Name]
	if !ok {
		panic(errors.Errorf("No Register RPC Client[%s]", User.Name))
	}
	return NewUserClient(conn)
}

type UserClient struct {
	cli user.UserClient
}

func NewUserClient(cc *grpc.ClientConn) *UserClient {
	return &UserClient{
		cli: user.NewUserClient(cc),
	}
}

func (s *UserClient) Test(ctx context.Context, req *user.TestRequest, timeout ...time.Duration) (*user.TestResponse, error) {
	_timeout := 2 * time.Second
	if len(timeout) > 0 {
		_timeout = timeout[0]
	}
	ctx, cancel := context.WithTimeout(ctx, _timeout)
	defer cancel()
	st := time.Now()
	resp, err := s.cli.Test(ctx, req)
	prometheus.HistogramVec.Timing("rpc_client_User_Test", []string{"from", From, "ret", prometheus.RetLabel(err)}, st)
	return resp, err
}
